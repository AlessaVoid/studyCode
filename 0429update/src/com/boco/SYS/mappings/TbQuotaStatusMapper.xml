<?xml version="1.0" encoding="GBK"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 额度生成情况表 -->
<mapper namespace="com.boco.SYS.mapper.TbQuotaStatusMapper">
    <!-- ##############################################批量生成方法########################################### -->
    <cache readOnly="true"/>
    <!-- 返回列表 -->
    <resultMap id="base_result_map" type="com.boco.SYS.entity.TbQuotaStatus">
        <id column="plan_month" property="planMonth"/>
        <result column="quota_status" property="quotaStatus"/>
        <result column="execute_status" property="executeStatus"/>
    </resultMap>

    <!-- 列集合 -->
    <sql id="base_column_list">
	    <![CDATA[

                plan_month ,quota_status ,execute_status

        ]]>
	</sql>

    <!-- 新增一条实体 -->
    <insert id="insertEntity" parameterType="com.boco.SYS.entity.TbQuotaStatus">
        <!--
                -->
        INSERT INTO tb_quota_status
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="planMonth != null">
                plan_month ,
            </if>
            <if test="quotaStatus != null">
                quota_status ,
            </if>
            <if test="executeStatus != null">
                execute_status
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="planMonth != null">
                #{planMonth} ,
            </if>
            <if test="quotaStatus != null">
                #{quotaStatus} ,
            </if>
            <if test="executeStatus != null">
                #{executeStatus}
            </if>
        </trim>
    </insert>

    <!-- 批量插入 -->
    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO tb_quota_status
        (plan_month ,quota_status ,execute_status )
        <foreach collection="list" item="item" index="index" separator="UNION ALL">
            (SELECT
            #{item.planMonth,jdbcType=VARCHAR},#{item.quotaStatus,jdbcType=VARCHAR},#{item.executeStatus,jdbcType=VARCHAR}
            FROM DUAL)
        </foreach>
    </insert>

    <!-- 根据主键删除一条记录 -->
    <delete id="deleteByPK" parameterType="java.lang.String">
        DELETE FROM tb_quota_status
        <where>
            plan_month = #{planMonth}
        </where>
    </delete>

    <!-- 根据主键删除一条记录(不抛异常,适用先删除后新增的功能,删除时如果没数据不抛异常) -->
    <delete id="deleteByPKNoException" parameterType="java.lang.String">
        DELETE FROM tb_quota_status
        <where>
            plan_month = #{planMonth}
        </where>
    </delete>

    <!-- 根据主键批量删除记录(只适用单主键的表) -->
    <delete id="deleteBatchByPK" parameterType="java.util.List">
        DELETE FROM tb_quota_status
        WHERE plan_month IN
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <!-- 自定义where条件删除，参数为where后的条件字符串，如"id='1' and name='a'" -->
    <delete id="deleteByWhere" parameterType="java.lang.String">
        DELETE FROM tb_quota_status
        <where>
            ${whereStr}
        </where>
    </delete>

    <!-- 根据主键修改一条记录 -->
    <update id="updateByPK" parameterType="com.boco.SYS.entity.TbQuotaStatus">
        UPDATE tb_quota_status
        <set>
            <if test="quotaStatus != null">
                quota_status = #{quotaStatus},
            </if>
            <if test="executeStatus != null">
                execute_status = #{executeStatus},
            </if>
        </set>
        <where>
            plan_month = #{planMonth}
        </where>
    </update>

    <!-- 批量修改，参数：map(column="XXX"，keyList="XXX")-->
    <update id="updateBatch" parameterType="java.util.HashMap">
        UPDATE tb_quota_status
        <set>
        </set>
        WHERE id IN
        <foreach collection="keyList" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!-- 自定义where条件修改，参数为where后的条件字符串，如"id='1' and name='a'" -->
    <update id="updateByWhere" parameterType="java.lang.String">
        UPDATE tb_quota_status
        <set>
            <if test="planMonth != null">
                plan_month = #{planMonth},
            </if>
            <if test="quotaStatus != null">
                quota_status = #{quotaStatus},
            </if>
            <if test="executeStatus != null">
                execute_status = #{executeStatus},
            </if>
        </set>
        <where>
            ${whereStr}
        </where>
    </update>

    <!-- 动态where -->
    <sql id="where_equal">
        <if test="planMonth != null and planMonth != ''">
            and plan_month = #{planMonth}
        </if>
        <if test="quotaStatus != null and quotaStatus != ''">
            and quota_status = #{quotaStatus}
        </if>
        <if test="executeStatus != null and executeStatus != ''">
            and execute_status = #{executeStatus}
        </if>
    </sql>

    <!-- 模糊查询动态where -->
    <sql id="where_like">
        <if test="planMonth != null and planMonth != ''">
            and plan_month like '%' || #{planMonth} || '%'
        </if>
        <if test="quotaStatus != null and quotaStatus != ''">
            and quota_status like '%' || #{quotaStatus} || '%'
        </if>
        <if test="executeStatus != null and executeStatus != ''">
            and execute_status like '%' || #{executeStatus} || '%'
        </if>
    </sql>

    <!-- 根据主键查询一条记录 -->
    <select id="selectByPK" parameterType="java.lang.String" resultMap="base_result_map" flushCache="true">
        SELECT
        <include refid="base_column_list"/>
        FROM tb_quota_status
        <where>
            plan_month = #{planMonth}
        </where>
    </select>

    <!-- 根据非主键唯一约束查询记录,没有唯一约束时查询所有记录 -->
    <select id="selectByUQ" parameterType="com.boco.SYS.entity.TbQuotaStatus" resultMap="base_result_map"
            flushCache="true">
        SELECT
        <include refid="base_column_list"/>
        FROM tb_quota_status
        <where>
        </where>
    </select>

    <!-- 根据条件查询记录 -->
    <select id="selectByAttr" parameterType="com.boco.SYS.entity.TbQuotaStatus" resultMap="base_result_map"
            flushCache="true">
        SELECT
        <include refid="base_column_list"/>
        FROM tb_quota_status
        <where>
            <include refid="where_equal"/>
        </where>
        <if test="sortColumn != null and sortColumn != ''">
            order by ${sortColumn}
        </if>
    </select>

    <!-- 根据模糊条件查询记录 -->
    <select id="selectByLikeAttr" parameterType="com.boco.SYS.entity.TbQuotaStatus" resultMap="base_result_map"
            flushCache="true">
        SELECT
        <include refid="base_column_list"/>
        FROM tb_quota_status
        <where>
            <include refid="where_like"/>
        </where>
        <if test="sortColumn != null and sortColumn != ''">
            group by ${sortColumn}
        </if>
    </select>

    <!-- 通过where语句查询 -->
    <select id="selectByWhere" parameterType="java.lang.String" resultMap="base_result_map" flushCache="true">
        SELECT
        <include refid="base_column_list"/>
        FROM tb_quota_status
        <where>
            ${whereStr}
        </where>
    </select>

    <!-- 根据条件查询记录数 -->
    <select id="countByAttr" parameterType="com.boco.SYS.entity.TbQuotaStatus" resultType="java.lang.Integer"
            flushCache="true">
        select count(*) from tb_quota_status
        <where>
            <include refid="where_equal"/>
        </where>
    </select>

    <!-- 根据模糊条件查询记录数 -->
    <select id="countByLikeAttr" parameterType="com.boco.SYS.entity.TbQuotaStatus" resultType="java.lang.Integer"
            flushCache="true">
        select count(*) from tb_quota_status
        <where>
            <include refid="where_like"/>
        </where>
    </select>

    <!-- 根据自定义条件查询记录数 -->
    <select id="countByWhere" parameterType="java.lang.String" resultType="java.lang.Integer" flushCache="true">
        select count(*) from tb_quota_status
        <where>
            ${whereStr}
        </where>
    </select>
    <!-- ##############################################批量生成方法########################################### -->

    <!-- ##############################################自定义方法############################################# -->


    <!-- ##############################################自定义方法############################################# -->
</mapper>